

pipeline {
    
	agent any
	
	tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }
	
    environment {
        SNAP_REPO = 'vprofile-snapshot'
        NEXUS_USER = "admin"
        NEXUS_PASS = "admin123"
        RELEASE_REPO = 'vprofile-release'
        CENTRAL_REPO = 'vpro-maven-central'
        NEXUSIP = '172.31.11.114'
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'vpro-maven-group'
	    NEXUS_LOGIN = "nexuslogin"
        SONARSERVER = 'sonarserver'
        SONARSCANNER ='sonarscanner'
        registryCredential = 'ecr:ap-south-1:awscreds'
        appRegistry = '444842782536.dkr.ecr.ap-south-1.amazonaws.com/vprofileappimg'
        vrpofileRegistry = 'https://444842782536.dkr.ecr.ap-south-1.amazonaws.com/vprofileappimg'
        cluster = "vprostaging"
        service = "aproappstagesvc"
        
            }
	
    stages{
        
        stage('BUILD'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
           post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
        stage('UNIT TEST'){
            steps {
                sh 'mvn -s settings.xml test'
            }
        }
       stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            } 
       }

       stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool "${SONARSCANNER}"
          }

          steps {
            withSonarQubeEnv("${SONARSERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
               }
           }
        }

        stage("Quality Gate") {
             steps{ 
            timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
            }
          }
        }
        stage("Uploadartifact"){
                     steps{
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                            groupId: "QA",
                            version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                            repository:"${RELEASE_REPO}",
                            credentialsId: "${NEXUS_LOGIN}",
                            artifacts: [
                                [artifactId: 'vproapp',
                                classifier: '',
                                file: 'target/vprofile-v2.war',
                                type: 'war' ]
                                 ]
                           )
                     }
                }
                  
         
         stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
         }
         
         stage('UPLOAD APP IMAGE') {
            steps{
                script {
                    docker.withRegistry( vrpofileRegistry, registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }    
                }
            }
         }

       }

       stage('Deploy to staging') {
        steps {
            withAWS(credentials: 'awscreds' , region: 'ap-south-1') {
                sh 'aws ecs update-service --cluster ${cluster}  --service ${service} --force-new-deployment'
            }
        }
    }
}
       
             


	
